<section>
  <h2>What happens if you don’t manage your layout</h2>
  <p>
    Let’s start with the latest question,
    <strong>What happens if you don’t manage you layout</strong>. In the first weeks of development, you wont really notices anything, it’s when you start making changes that you discover the mistake. If you have no system to make sure the components on the page are evenly distributed, you will end up with a messy design. If you want to change the distance between each section on the page, but find yourself updating the same value in multiple files, you will eventually end up with a unmanageable project where updates take way too much time.
  </p>
  <p>
    If you want to achieve the consistency in your layouts, you will end up with a design where the visual hierarchy is clear and where changes to the layout won’t take long.
  </p>
</section>

<section>
  <h2>What is layout?</h2>
  <p>
    So how should you do this? To be able to answer this question I first want to explain the concept of
    <strong>layout</strong>
    to you.
  </p>
  <p>
    A layout exists out of three main elements. Constrains, spacing and flow. So what are they?
  </p>

  <section>
    <h3>Constrains</h3>
    <p>
      Constrains are the maximum sizes, either horizontally and vertically. You can think of the maximum width of a text or the max width of a section inside of a coloured block on the homepage. Theses values will make sure your design won’t stretch to far on larger screens and fluidly wrap if there is space allows it.
    </p>
  </section>

  <section>
    <h3>Spacing</h3>
    <p>
      Spacing are the empty spaces between each element in the layout. They make clear what content belongs together and what not. They also create white-space and calmness into your design.
    </p>
  </section>

  <section>
    <h3>Flow</h3>
    <p>
      Flow controls how elements wrap. This is only relevant in a fluent design where elements have the opportunity to wrap. Therefor the flow relies on the constrains of each element.
    </p>
  </section>

  <section>
    <h3>The difference between layout and a grid</h3>
    <p>
      A grid is always a layout but a layout isn’t always a grid. This is important to understand the solution in the next chapter. A grid always contains the three elements of layout (constrains, spacing and flow). But when a layout doesn’t contain any flow, it’s not a grid and you can create the layout in a different way.
    </p>
  </section>
</section>

<section>
  <h2>How to manage your layout</h2>
  <p>
    There are two ways I manage my layouts. Both implementations are very different but can be used in the same project. They are both used in different scenario’s.
  </p>

  <section>
    <h3>Make all values reusable</h3>
    <p>
      If you want to start with your layout, you should first set all the different values that you need as variables. Theses values will probably match the three elements of the layout. This is how I do it.
    </p>
  </section>

  <section>
    <h3>Constrains</h3>
    <p>
      I want to have different constrains for different type of elements. One for large elements like articles, carousels etc. One for elements like text, images and one for small elements like cards. I use t-shirt size values like s, xl, m etc for this because it’s easy to add them and clear when you have to many of them.
    </p>

    <code>
      :root { —constrain-l: 50rem; —constrain-m: 27rem; —constrain-s: 10rem; }
    </code>

    <p>
      Next to these t-shirt size values I also set a value for the text constrain that takes a t-shirt size constrain as its value.
    </p>

    <code>
      :root { —max-text: var(—constrain-m); }
    </code>
  </section>

  <section>
    <h3>Spacings</h3>
    <p>
      The same system is used to create the spacings, only I start with more than three values. Because a lot of the time there is a scale in these values (like you would have with with typography), its important to discus these values with your design team before setting them.
    </p>

    <code>:root { —spacing-xl: 12.5rem; —spacing-xl: 9rem; —spacing-l: 5.5rem; —spacing-m: 2.3rem; —spacing-s: 1.125rem; —spacing-xs: .3rem; —spacing-xxs: .1rem; }</code>

    <p>
      These values rule your design, therefore I wont use another value to create spacing between element. Only if the design team has a very good explanation for them I will create a different value for a single component.
    </p>
  </section>

  <section>
    <h3>Flow</h3>
    <p>
      The flow is something I don’t set in variables as that’s already done by CSS itself. There is no need to create a class for justifying items.
    </p>
  </section>

  <section>
    <h3>Manage your layout by CSS classes</h3>
    <p>
      For simple layout's, like blocks stacked on each other, I use CSS classes to control the layout. Just like utility classes. For the spacing I create three variables that reflect the type of element. The names are
      <code>.page-element</code>,
      <code>.section-element</code>
      and
      <code>.text-element</code>. For the constrains I do the same.
      <code>.page-constrain</code>,
      <code>.section-constrain</code>
      and
      <code>.text-constrain</code>.
    </p>

    {# Add CSS example here #}

    <h4>The advantages</h4>
    <p>
      By setting the spaces and constrains with classes, you only have to update one value to effect the layout of the entire website. Because they are set as CSS classes, you can manage the layout entirely from your HTML. No need for components to have any constrains. You can wrap anything in a `div` that contains a layout class and the component will fit nicely into the layout.
    </p>
    <p>
      A small example of a template that handles the layout with CSS classes
    </p>
    <code>
      <main class="“page-constrain”">
        <section class”page-element”="class”page-element”">
          <h1>Main title</h1>
          <p>Some nice text</p>
        </section>

        <section class”page-element”="class”page-element”">
          <h2>Section title</h2>
          <p>Some nice text</p>

          <div class”section-constrain="class”section-constrain" section-element”="section-element”">
            // Some component
          </div>
          <div class”section-constrain="class”section-constrain" section-element”="section-element”">
            // Some component
          </div>
          <div class”section-constrain="class”section-constrain" section-element”="section-element”">
            // Some component
          </div>
        </section>
      </main>
    </code>

    <p>
      The HTML in this example handles the layout. Each element will be evenly distributed and each component doesn’t need to have any knowledge of the layout it’s in.
    </p>

    <h4>The disadvantage</h4>
    <p>
      If a layout needs some more configuration or contains the flow aspect, there are better suited solutions. That's because its error prone to add configuration (CCS class or data-element) to each direct child in the layout. It's easy to forget one direct child and break your layout.
    </p>
  </section>

  <section>
    <h3>Manege your layout with components</h3>
    <p>If a layout needs a lot of configuration, managing it by components it the way to go! Also if your layout contains Flow (grids), I use components to control the layout.
    </p>

    <p>
      If there are not to many of these components, I usually call them
      <code>grid-alpha</code>,
      <code>grid-beta</code>
      etc. If there are too many it’s a good idea to align the naming of the grids with the design team for consistency.
    </p>

    <h4>The implementation</h4>
    <p>
      A layout component will receive multiple items that needs to be rendered inside the grid. They are called grid items. The grid will perform a simple loop and render each component.
    </p>
    <code>
      <div class="“grid-alpha”">
        {for each grid item}
        <div class="“grid-alpha__item”">
          // Render the component
        </div>
        {end for each grid item}
      </div>
    </code>
    <p>
      You can use the same variables that are already set for the spacings between each grid item.
    </p>

    <h4>The advantages</h4>
    <p>
      The big advantage for using a component instead of classes is the way you can control the exceptions or setting. For instance, you have a very basic grid layout, but the size of the gutters can differ. This could be set by a property of the component. A lot of the times, there are multiple exceptions. Therefore you don’t want to add a class for each exception.
    </p>
    <p>
      Because grids have control over each element in the grid, it’s able to manage the flow of the grid items. This is not possible with the CSS classes approach because that’s not in control over all the items within it.
    </p>
    <p>
      The way that grids have the same code interface is also a benefit. Each grid will loop. Therefor it’s very easy to swap grids, without changing anything else. Just change the name
      <code>grid-alpha</code>
      to
      <code>grid-beta</code>
      and another interface will appear.
    </p>
  </section>

  <section>
    <h2>Conclusion</h2>
    <p>
      It’s only when you start making changes that you discovered that your layout isn’t managed properly. Instead of applying a fix on a single place, you have to update multiple files. This is where you could have managed your layout in a better manner.
    </p>
    <p>
      There are two good approaches that can be used beside each other. Managing your layout with CSS classes and with components. CSS classes should be used for layouts without any flow. The different CSS classes manage the distance between the elements (spacing) and the maximum size (constrains). These classes can be used anywhere you want.
    </p>
    <p>
      If there is a flow aspect to the layout, it’s a better idea to use a component. A component can also receives settings and is very easy to swap with another grid because the code interface is the same.
    </p>
  </section>
</section>
