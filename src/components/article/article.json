{
  "title": "You should use the GitHub branches",
  "date": "02-07-2016",
  "article":
    "<p class=\"note\">GitHub gives you the possibility to create an infinite amount of branches, but why should you use to do that? After a talk I had at GitHub Amsterdam, this became clear to me and I would like to share it with you because it improved my working process.</p><img src=\"martijn-med.jpg\" alt=\"The GitHub logo\"><p>At GitHub, there’s a branch for every adjustment there’s made. With the simple reason to separate the little projects from the main branch. These branches are called: Feature branches and as the name probably will tell you, you create a new feature in this branch. After the feature is done, you can request a pull request, get some issues, fix them and merge your new feature with the bigger branch. After this, you can probably deploy a new version and you’re done.</p><p>Of course, this is the ideal world and not everybody lives in that world. So what if you work at a company who don’t use issues, pull requests and multiple branches, why would I still start creating feature branches?</p><h2>First, StructureFirst, Structure First, Structure First, Structure</h2><p>This is how my structure goes. There is one <strong>master</strong> branch and one <strong>develop</strong> branch. The only branch who is allowed to talk to the master branch is the develop branch. The only thing the live server is allowed to pull is the master branch. This means every branch can be merged into the develop branch, tested and pushed to the master branch after a GO. This prevents bugs on the live server.</p>"
}
